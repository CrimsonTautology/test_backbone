// Generated by CoffeeScript 1.8.0
(function() {
  describe("Restaurant", function() {
    it("should exist", function() {
      return expect(Gourmet.Models.Restaurant).toBeDefined();
    });
    describe("Attributes", function() {
      var ritz;
      ritz = new Gourmet.Models.Restaurant;
      it("has a name", function() {
        return expect(ritz.attributes.name).toBeDefined();
      });
      it("has a postcode", function() {
        return expect(ritz.attributes.postcode).toBeDefined();
      });
      return it("has a rating", function() {
        return expect(ritz.attributes.rating).toBeDefined();
      });
    });
    return describe("Validations", function() {
      var attrs;
      attrs = {};
      beforeEach(function() {
        return attrs = {
          name: 'Ritz',
          postcode: 'N112TP',
          rating: 5
        };
      });
      it("should validate the presence of name", function() {
        var ritz;
        attrs["name"] = null;
        ritz = new Gourmet.Models.Restaurant(attrs);
        return expect(ritz.isValid()).toBeFalsy();
      });
      it("should validate the presence of postcode", function() {
        var ritz;
        attrs["postcode"] = null;
        ritz = new Gourmet.Models.Restaurant(attrs);
        return expect(ritz.isValid()).toBeFalsy();
      });
      it("should validate the presence of rating", function() {
        var ritz;
        attrs["rating"] = null;
        ritz = new Gourmet.Models.Restaurant(attrs);
        return expect(ritz.isValid()).toBeFalsy();
      });
      it("should validate the numericality of rating", function() {
        var ritz;
        attrs["rating"] = 'foobar';
        ritz = new Gourmet.Models.Restaurant(attrs);
        return expect(ritz.isValid()).toBeFalsy();
      });
      it("should not accept a rating < 1", function() {
        var ritz;
        attrs["rating"] = 0;
        ritz = new Gourmet.Models.Restaurant(attrs);
        return expect(ritz.isValid()).toBeFalsy();
      });
      return it("should not accept a rating > 5", function() {
        var ritz;
        attrs["rating"] = 6;
        ritz = new Gourmet.Models.Restaurant(attrs);
        return expect(ritz.isValid()).toBeFalsy();
      });
    });
  });

  describe("Restaurants Collection", function() {
    var restaurants;
    restaurants = new Gourmet.Collections.RestaurantsCollection;
    it("should exist", function() {
      return expect(Gourmet.Collections.RestaurantsCollection).toBeDefined();
    });
    return it("should use the Restaurant model", function() {
      return expect(restaurants.model).toEqual(Gourmet.Models.Restaurant);
    });
  });

}).call(this);
